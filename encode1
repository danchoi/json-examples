#!/usr/bin/env stack
-- stack --resolver lts-10.7 script --package aeson,bytestring,text
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}
import Data.Aeson
import Data.Aeson.Types (defaultOptions)
import qualified Data.ByteString.Lazy.Char8 as BL
import qualified Data.Text as T
import GHC.Generics

data Computer = Computer {
    formFactor :: FormFactor
  , gbRam  :: Int
  , peripherals :: [Peripheral]
  } deriving (Show, Generic)

data FormFactor = Laptop | Desktop 
  deriving (Show, Generic)

data Peripheral = 
        Mouse
      | Keyboard
  deriving (Show, Generic)

instance ToJSON Computer where
  toJSON (Computer f g ps) = object [
      "form_factor" .= f
    , "gb_ram" .= g 
    , "peripherals" .= ps
    ]

instance ToJSON FormFactor where
  toJSON Laptop = String "laptop"
  toJSON Desktop = String "desktop"

instance ToJSON Peripheral where
  toJSON Mouse = String "mouse"
  toJSON Keyboard  = String "keyboard"

main = do
  let c = Computer Desktop 16 [Mouse, Keyboard]
  BL.putStrLn . encode $ c


